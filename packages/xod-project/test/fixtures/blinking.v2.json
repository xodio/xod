{
  "authors": [
    "Amperka team"
  ],
  "name": "awesome-project",
  "description": "",
  "license": "",
  "patches": {
    "xod/math/subtrac": {
      "path": "xod/math/subtrac",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { out: (e.inputs.a - e.inputs.b) };\n};\n"
      },
      "pins": {
        "a": {
          "key": "a",
          "type": "number",
          "direction": "input",
          "label": "a",
          "description": "",
          "order": 0,
          "value": 0
        },
        "b": {
          "key": "b",
          "type": "number",
          "direction": "input",
          "label": "b",
          "description": "",
          "order": 0,
          "value": 0
        },
        "out": {
          "key": "out",
          "type": "number",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": 0
        }
      }
    },
    "xod/math/multiply": {
      "path": "xod/math/multiply",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { out: (e.inputs.a * e.inputs.b) };\n};\n"
      },
      "pins": {
        "a": {
          "key": "a",
          "type": "number",
          "direction": "input",
          "label": "a",
          "description": "",
          "order": 0,
          "value": 0
        },
        "b": {
          "key": "b",
          "type": "number",
          "direction": "input",
          "label": "b",
          "description": "",
          "order": 0,
          "value": 0
        },
        "out": {
          "key": "out",
          "type": "number",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": 0
        }
      }
    },
    "xod/math/divide": {
      "path": "xod/math/divide",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { out: (e.inputs.a / e.inputs.b) };\n};\n"
      },
      "pins": {
        "a": {
          "key": "a",
          "type": "number",
          "direction": "input",
          "label": "a",
          "description": "",
          "order": 0,
          "value": 0
        },
        "b": {
          "key": "b",
          "type": "number",
          "direction": "input",
          "label": "b",
          "description": "",
          "order": 0,
          "value": 0
        },
        "out": {
          "key": "out",
          "type": "number",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": 0
        }
      }
    },
    "xod/math/add": {
      "path": "xod/math/add",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { out: (e.inputs.a + e.inputs.b) };\n};\n"
      },
      "pins": {
        "a": {
          "key": "a",
          "type": "number",
          "direction": "input",
          "label": "a",
          "description": "",
          "order": 0,
          "value": 0
        },
        "b": {
          "key": "b",
          "type": "number",
          "direction": "input",
          "label": "b",
          "description": "",
          "order": 0,
          "value": 0
        },
        "out": {
          "key": "out",
          "type": "number",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": 0
        }
      }
    },
    "xod/core/valve-number": {
      "path": "xod/core/valve-number",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  if (e.inputs.cond) {\n    e.fire({ out: e.inputs.in });\n  }\n};\n"
      },
      "pins": {
        "cond": {
          "key": "cond",
          "type": "boolean",
          "direction": "input",
          "label": "cond",
          "description": "",
          "order": 0,
          "value": false
        },
        "in": {
          "key": "in",
          "type": "number",
          "direction": "input",
          "label": "in",
          "description": "",
          "order": 0,
          "value": 0
        },
        "out": {
          "key": "out",
          "type": "number",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": 0
        }
      },
      "label": "valve-number"
    },
    "xod/core/triggerable-number": {
      "path": "xod/core/triggerable-number",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { out: e.props.value };\n};\n"
      },
      "pins": {
        "trigOn": {
          "key": "trigOn",
          "type": "pulse",
          "direction": "input",
          "label": "trigOn",
          "description": "",
          "order": 0,
          "value": false
        },
        "value": {
          "key": "value",
          "type": "number",
          "direction": "input",
          "label": "value",
          "description": "",
          "order": 0,
          "value": 0
        },
        "out": {
          "key": "out",
          "type": "number",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": 0
        }
      },
      "label": "triggerable-number"
    },
    "xod/core/ultrasonic-hc-sr04": {
      "path": "xod/core/ultrasonic-hc-sr04",
      "nodes": {},
      "links": {},
      "impls": {
        "espruino": "\nvar sonic = require('@amperka/ultrasonic');\n\nmodule.exports.setup = function(e) {\n  var pinTrig = new Pin(e.props.pinTrig);\n  var pinEcho = new Pin(e.props.pinEcho);\n  e.context.device = sonic.connect({\n    trigPin: pinTrig,\n    echoPin: pinEcho\n  });\n  e.context.units = e.props.units;\n  e.context.isBusy = false;\n};\n\nmodule.exports.evaluate = function(e) {\n  if (e.context.isBusy) {\n    e.fire({ error: \"busy\" });\n  } else {\n    e.context.isBusy = true;\n    e.context.device.ping(function(err, value) {\n      e.context.isBusy = false;\n      if (err) {\n        e.fire({ error: err.msg });\n      } else {\n        e.fire({ value: value });\n      }\n    }, e.context.units);\n  }\n};\n"
      },
      "pins": {
        "sample": {
          "key": "sample",
          "type": "pulse",
          "direction": "input",
          "label": "sample",
          "description": "",
          "order": 0,
          "value": false
        },
        "units": {
          "key": "units",
          "type": "string",
          "direction": "input",
          "label": "units",
          "description": "",
          "order": 0,
          "value": ""
        },
        "value": {
          "key": "value",
          "type": "number",
          "direction": "output",
          "label": "value",
          "description": "",
          "order": 0,
          "value": 0
        },
        "error": {
          "key": "error",
          "type": "string",
          "direction": "output",
          "label": "error",
          "description": "",
          "order": 0,
          "value": ""
        }
      },
      "label": "HC-SR04"
    },
    "xod/core/time": {
      "path": "xod/core/time",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "module.exports.evaluate = function(e) {\n  return { value: new Date().getTime() };\n};\n"
      },
      "pins": {
        "pulse": {
          "key": "pulse",
          "type": "pulse",
          "direction": "input",
          "label": "pulse",
          "description": "",
          "order": 0,
          "value": false
        },
        "value": {
          "key": "value",
          "type": "number",
          "direction": "output",
          "label": "value",
          "description": "",
          "order": 0,
          "value": 0
        }
      },
      "label": "Time"
    },
    "xod/core/stdout": {
      "path": "xod/core/stdout",
      "nodes": {},
      "links": {},
      "impls": {
        "nodejs": "module.exports.evaluate = function(e) {\n  var val = String(e.inputs.value);\n  process.stdout.write(val);\n};\n"
      },
      "pins": {
        "value": {
          "key": "value",
          "type": "string",
          "direction": "input",
          "label": "value",
          "description": "",
          "order": 0,
          "value": ""
        }
      },
      "label": "stdout"
    },
    "xod/core/split-bool": {
      "path": "xod/core/split-bool",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  if (e.inputs.inp) {\n    return { outTrue: PULSE };\n  } else {\n    return { outFalse: PULSE };\n  }\n};\n"
      },
      "pins": {
        "inp": {
          "key": "inp",
          "type": "boolean",
          "direction": "input",
          "label": "inp",
          "description": "",
          "order": 0,
          "value": false
        },
        "outTrue": {
          "key": "outTrue",
          "type": "pulse",
          "direction": "output",
          "label": "outTrue",
          "description": "",
          "order": 0,
          "value": false
        },
        "outFalse": {
          "key": "outFalse",
          "type": "pulse",
          "direction": "output",
          "label": "outFalse",
          "description": "",
          "order": 0,
          "value": false
        }
      },
      "label": "Split"
    },
    "xod/core/servo": {
      "path": "xod/core/servo",
      "nodes": {},
      "links": {},
      "impls": {
        "espruino": "\nmodule.exports.setup = function(e) {\n  e.context.pin = new Pin(e.props.pin);\n};\n\nmodule.exports.evaluate = function(e) {\n  var minPulse = +e.props.minPulse;\n  var maxPulse = +e.props.maxPulse;\n  var us = minPulse + (maxPulse - minPulse) * e.inputs.value;\n  analogWrite(e.context.pin, us / 20000, { freq: 50 });\n};\n"
      },
      "pins": {
        "minPulse": {
          "key": "minPulse",
          "type": "number",
          "direction": "input",
          "label": "minPulse",
          "description": "",
          "order": 0,
          "value": 0
        },
        "maxPulse": {
          "key": "maxPulse",
          "type": "number",
          "direction": "input",
          "label": "maxPulse",
          "description": "",
          "order": 0,
          "value": 0
        },
        "value": {
          "key": "value",
          "type": "number",
          "direction": "input",
          "label": "value",
          "description": "",
          "order": 0,
          "value": 0
        }
      }
    },
    "xod/core/output-string": {
      "path": "xod/core/output-string",
      "nodes": {},
      "links": {},
      "impls": {},
      "pins": {
        "__in__": {
          "key": "__in__",
          "type": "string",
          "direction": "input",
          "label": "__in__",
          "description": "",
          "order": 0,
          "value": ""
        }
      },
      "label": "<OutputString>"
    },
    "xod/core/output-number": {
      "path": "xod/core/output-number",
      "nodes": {},
      "links": {},
      "impls": {},
      "pins": {
        "__in__": {
          "key": "__in__",
          "type": "number",
          "direction": "input",
          "label": "__in__",
          "description": "",
          "order": 0,
          "value": 0
        }
      },
      "label": "<OutputNumber>"
    },
    "xod/core/pot": {
      "path": "xod/core/pot",
      "nodes": {},
      "links": {},
      "impls": {
        "espruino": "\nmodule.exports.setup = function(e) {\n  e.context.pin = new Pin(e.props.pin);\n};\n\nmodule.exports.evaluate = function(e) {\n  return { value: analogRead(e.context.pin) };\n};\n"
      },
      "pins": {
        "sample": {
          "key": "sample",
          "type": "pulse",
          "direction": "input",
          "label": "sample",
          "description": "",
          "order": 0,
          "value": false
        },
        "value": {
          "key": "value",
          "type": "number",
          "direction": "output",
          "label": "value",
          "description": "",
          "order": 0,
          "value": 0
        }
      }
    },
    "xod/core/output-pulse": {
      "path": "xod/core/output-pulse",
      "nodes": {},
      "links": {},
      "impls": {},
      "pins": {
        "__in__": {
          "key": "__in__",
          "type": "pulse",
          "direction": "input",
          "label": "__in__",
          "description": "",
          "order": 0,
          "value": false
        }
      },
      "label": "<OutputPulse>"
    },
    "xod/core/output-bool": {
      "path": "xod/core/output-bool",
      "nodes": {},
      "links": {},
      "impls": {},
      "pins": {
        "__in__": {
          "key": "__in__",
          "type": "boolean",
          "direction": "input",
          "label": "__in__",
          "description": "",
          "order": 0,
          "value": false
        }
      },
      "label": "<OutputBool>"
    },
    "xod/core/or": {
      "path": "xod/core/or",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { out: e.inputs.a || e.inputs.b };\n};\n"
      },
      "pins": {
        "a": {
          "key": "a",
          "type": "boolean",
          "direction": "input",
          "label": "a",
          "description": "",
          "order": 0,
          "value": false
        },
        "b": {
          "key": "b",
          "type": "boolean",
          "direction": "input",
          "label": "b",
          "description": "",
          "order": 0,
          "value": false
        },
        "out": {
          "key": "out",
          "type": "boolean",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": false
        }
      },
      "label": "or"
    },
    "xod/core/not": {
      "path": "xod/core/not",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { out: !e.inputs.in };\n};\n"
      },
      "pins": {
        "in": {
          "key": "in",
          "type": "boolean",
          "direction": "input",
          "label": "in",
          "description": "",
          "order": 0,
          "value": false
        },
        "out": {
          "key": "out",
          "type": "boolean",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": false
        }
      },
      "label": "not"
    },
    "xod/core/less": {
      "path": "xod/core/less",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  var a = e.inputs.a;\n  var b = e.inputs.b;\n\n  if (a === undefined || b === undefined) {\n    return;\n  }\n\n  return { out: a < b };\n};\n"
      },
      "pins": {
        "a": {
          "key": "a",
          "type": "number",
          "direction": "input",
          "label": "a",
          "description": "",
          "order": 0,
          "value": 0
        },
        "b": {
          "key": "b",
          "type": "number",
          "direction": "input",
          "label": "b",
          "description": "",
          "order": 0,
          "value": 0
        },
        "out": {
          "key": "out",
          "type": "boolean",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/map": {
      "path": "xod/core/map",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  var inputs = e.inputs;\n  var k = (inputs.inp - inputs.inA) / (inputs.inB - inputs.inA);\n  var out = inputs.outA + k * (inputs.outB - inputs.outA);\n\n  if (inputs.clip) {\n    if (inputs.outB > inputs.outA) {\n      out = Math.max(inputs.outA, out);\n      out = Math.min(inputs.outB, out);\n    } else {\n      out = Math.max(inputs.outB, out);\n      out = Math.min(inputs.outA, out);\n    }\n  }\n\n  return { out: out };\n};\n"
      },
      "pins": {
        "inp": {
          "key": "inp",
          "type": "number",
          "direction": "input",
          "label": "inp",
          "description": "",
          "order": 0,
          "value": 0
        },
        "inA": {
          "key": "inA",
          "type": "number",
          "direction": "input",
          "label": "inA",
          "description": "",
          "order": 0,
          "value": 0
        },
        "inB": {
          "key": "inB",
          "type": "number",
          "direction": "input",
          "label": "inB",
          "description": "",
          "order": 0,
          "value": 0
        },
        "outA": {
          "key": "outA",
          "type": "number",
          "direction": "input",
          "label": "outA",
          "description": "",
          "order": 0,
          "value": 0
        },
        "outB": {
          "key": "outB",
          "type": "number",
          "direction": "input",
          "label": "outB",
          "description": "",
          "order": 0,
          "value": 0
        },
        "clip": {
          "key": "clip",
          "type": "boolean",
          "direction": "input",
          "label": "clip",
          "description": "",
          "order": 0,
          "value": false
        },
        "out": {
          "key": "out",
          "type": "number",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": 0
        }
      }
    },
    "xod/core/input-string": {
      "path": "xod/core/input-string",
      "nodes": {},
      "links": {},
      "impls": {},
      "pins": {
        "__out__": {
          "key": "__out__",
          "type": "string",
          "direction": "output",
          "label": "__out__",
          "description": "",
          "order": 0,
          "value": ""
        }
      },
      "label": "<InputString>"
    },
    "xod/core/latch": {
      "path": "xod/core/latch",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  var inputs = e.inputs;\n  var newState;\n\n  if (inputs.toggle) {\n    newState = !e.context.state;\n  } else if (inputs.set) {\n    newState = true;\n  } else /* if (inputs.reset) */ {\n    newState = false;\n  }\n\n  e.context.state = newState;\n  return { state: newState };\n};\n"
      },
      "pins": {
        "toggle": {
          "key": "toggle",
          "type": "pulse",
          "direction": "input",
          "label": "toggle",
          "description": "",
          "order": 0,
          "value": false
        },
        "set": {
          "key": "set",
          "type": "pulse",
          "direction": "input",
          "label": "set",
          "description": "",
          "order": 0,
          "value": false
        },
        "reset": {
          "key": "reset",
          "type": "pulse",
          "direction": "input",
          "label": "reset",
          "description": "",
          "order": 0,
          "value": false
        },
        "state": {
          "key": "state",
          "type": "boolean",
          "direction": "output",
          "label": "state",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/led": {
      "path": "xod/core/led",
      "nodes": {},
      "links": {},
      "impls": {
        "espruino": "\nmodule.exports.setup = function(e) {\n  e.context.pin = new Pin(e.props.pin);\n};\n\nmodule.exports.evaluate = function(e) {\n  var b = e.inputs.brightness;\n\n  // Adjust duty cycle as a power function to align brightness\n  // perception by human eye\n  var duty = b * b * b;\n\n  analogWrite(e.context.pin, duty);\n};\n"
      },
      "pins": {
        "brightness": {
          "key": "brightness",
          "type": "number",
          "direction": "input",
          "label": "brightness",
          "description": "",
          "order": 0,
          "value": 0
        }
      },
      "label": "LED"
    },
    "xod/core/input-pulse": {
      "path": "xod/core/input-pulse",
      "nodes": {},
      "links": {},
      "impls": {},
      "pins": {
        "__out__": {
          "key": "__out__",
          "type": "pulse",
          "direction": "output",
          "label": "__out__",
          "description": "",
          "order": 0,
          "value": false
        }
      },
      "label": "<InputPulse>"
    },
    "xod/core/input-bool": {
      "path": "xod/core/input-bool",
      "nodes": {},
      "links": {},
      "impls": {},
      "pins": {
        "__out__": {
          "key": "__out__",
          "type": "boolean",
          "direction": "output",
          "label": "__out__",
          "description": "",
          "order": 0,
          "value": false
        }
      },
      "label": "<InputBool>"
    },
    "xod/core/input-number": {
      "path": "xod/core/input-number",
      "nodes": {},
      "links": {},
      "impls": {},
      "pins": {
        "__out__": {
          "key": "__out__",
          "type": "number",
          "direction": "output",
          "label": "__out__",
          "description": "",
          "order": 0,
          "value": 0
        }
      },
      "label": "<InputNumber>"
    },
    "xod/core/file-write": {
      "path": "xod/core/file-write",
      "nodes": {},
      "links": {},
      "impls": {
        "nodejs": "var path = require('path');\nvar fs = require('fs');\n\nmodule.exports.evaluate = function(e) {\n  var filename = e.inputs.fileName;\n  var data = e.inputs.data;\n\n  fs.writeFile(filename, data, function (err) {\n    if (err) {\n      e.fire({ onFailure: err.toString() });\n      return;\n    }\n\n    e.fire({ onSuccess: PULSE });\n  });\n};\n"
      },
      "pins": {
        "fileName": {
          "key": "fileName",
          "type": "string",
          "direction": "input",
          "label": "fileName",
          "description": "",
          "order": 0,
          "value": ""
        },
        "data": {
          "key": "data",
          "type": "pulse",
          "direction": "input",
          "label": "data",
          "description": "",
          "order": 0,
          "value": false
        },
        "onSuccess": {
          "key": "onSuccess",
          "type": "pulse",
          "direction": "output",
          "label": "onSuccess",
          "description": "",
          "order": 0,
          "value": false
        },
        "onFailure": {
          "key": "onFailure",
          "type": "string",
          "direction": "output",
          "label": "onFailure",
          "description": "",
          "order": 0,
          "value": ""
        }
      },
      "label": "File write"
    },
    "xod/core/greater": {
      "path": "xod/core/greater",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  var a = e.inputs.a;\n  var b = e.inputs.b;\n\n  if (a === undefined || b === undefined) {\n    return;\n  }\n\n  return { out: a > b };\n};\n"
      },
      "pins": {
        "a": {
          "key": "a",
          "type": "number",
          "direction": "input",
          "label": "a",
          "description": "",
          "order": 0,
          "value": 0
        },
        "b": {
          "key": "b",
          "type": "number",
          "direction": "input",
          "label": "b",
          "description": "",
          "order": 0,
          "value": 0
        },
        "out": {
          "key": "out",
          "type": "boolean",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/file-read": {
      "path": "xod/core/file-read",
      "nodes": {},
      "links": {},
      "impls": {
        "nodejs": "var path = require('path');\nvar fs = require('fs');\n\nmodule.exports.evaluate = function(e) {\n  var filename = e.inputs.fileName;\n\n  fs.readFile(filename, function (err, data) {\n    if (err) {\n      e.fire({ error: err.toString() });\n      return;\n    }\n\n    e.fire({ data: data });\n  });\n};\n"
      },
      "pins": {
        "fileName": {
          "key": "fileName",
          "type": "string",
          "direction": "input",
          "label": "fileName",
          "description": "",
          "order": 0,
          "value": ""
        },
        "pulse": {
          "key": "pulse",
          "type": "pulse",
          "direction": "input",
          "label": "pulse",
          "description": "",
          "order": 0,
          "value": false
        },
        "data": {
          "key": "data",
          "type": "string",
          "direction": "output",
          "label": "data",
          "description": "",
          "order": 0,
          "value": ""
        },
        "error": {
          "key": "error",
          "type": "string",
          "direction": "output",
          "label": "error",
          "description": "",
          "order": 0,
          "value": ""
        }
      },
      "label": "File read"
    },
    "xod/core/digital-output": {
      "path": "xod/core/digital-output",
      "nodes": {},
      "links": {},
      "impls": {
        "espruino": "\nmodule.exports.evaluate = function(e) {\n  digitalWrite(e.inputs.pin, e.inputs.value);\n};\n"
      },
      "pins": {
        "pin": {
          "key": "pin",
          "type": "string",
          "direction": "input",
          "label": "pin",
          "description": "",
          "order": 0,
          "value": ""
        },
        "value": {
          "key": "value",
          "type": "number",
          "direction": "input",
          "label": "value",
          "description": "",
          "order": 0,
          "value": 0
        }
      }
    },
    "xod/core/equal": {
      "path": "xod/core/equal",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  var a = e.inputs.a;\n  var b = e.inputs.b;\n\n  if (a === undefined || b === undefined) {\n    return;\n  }\n\n  return { out: a === b };\n};\n"
      },
      "pins": {
        "a": {
          "key": "a",
          "type": "number",
          "direction": "input",
          "label": "a",
          "description": "",
          "order": 0,
          "value": 0
        },
        "b": {
          "key": "b",
          "type": "number",
          "direction": "input",
          "label": "b",
          "description": "",
          "order": 0,
          "value": 0
        },
        "out": {
          "key": "out",
          "type": "boolean",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/digital-input": {
      "path": "xod/core/digital-input",
      "nodes": {},
      "links": {},
      "impls": {
        "espruino": "\nmodule.exports.setup = function(e) {\n  e.inputs.pin = new Pin(e.inputs.pin);\n\n  setWatch(function(evt) {\n    e.fire({ state: !evt.state });\n  }, e.inputs.pin, {\n    edge: 'both',\n    repeat: true,\n    debounce: 30\n  });\n};\n"
      },
      "pins": {
        "pin": {
          "key": "pin",
          "type": "string",
          "direction": "input",
          "label": "pin",
          "description": "",
          "order": 0,
          "value": ""
        },
        "value": {
          "key": "value",
          "type": "number",
          "direction": "output",
          "label": "value",
          "description": "",
          "order": 0,
          "value": 0
        }
      }
    },
    "xod/core/either": {
      "path": "xod/core/either",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  var out = e.inputs.inp ? e.inputs.trueValue : e.inputs.falseValue;\n  return { out: out };\n};\n"
      },
      "pins": {
        "inp": {
          "key": "inp",
          "type": "boolean",
          "direction": "input",
          "label": "inp",
          "description": "",
          "order": 0,
          "value": false
        },
        "trueValue": {
          "key": "trueValue",
          "type": "number",
          "direction": "input",
          "label": "trueValue",
          "description": "",
          "order": 0,
          "value": 0
        },
        "falseValue": {
          "key": "falseValue",
          "type": "number",
          "direction": "input",
          "label": "falseValue",
          "description": "",
          "order": 0,
          "value": 0
        },
        "out": {
          "key": "out",
          "type": "number",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": 0
        }
      }
    },
    "xod/core/const-string": {
      "path": "xod/core/const-string",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { value: e.inputs.inValue };\n};\n"
      },
      "pins": {
        "inValue": {
          "key": "inValue",
          "type": "string",
          "direction": "input",
          "label": "inValue",
          "description": "",
          "order": 0,
          "value": ""
        },
        "pulse": {
          "key": "pulse",
          "type": "pulse",
          "direction": "input",
          "label": "pulse",
          "description": "",
          "order": 0,
          "value": false
        },
        "value": {
          "key": "value",
          "type": "string",
          "direction": "output",
          "label": "value",
          "description": "",
          "order": 0,
          "value": ""
        }
      },
      "label": "<String>"
    },
    "xod/core/const-number": {
      "path": "xod/core/const-number",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { value: e.inputs.inValue };\n};\n"
      },
      "pins": {
        "inValue": {
          "key": "inValue",
          "type": "number",
          "direction": "input",
          "label": "inValue",
          "description": "",
          "order": 0,
          "value": 0
        },
        "pulse": {
          "key": "pulse",
          "type": "pulse",
          "direction": "input",
          "label": "pulse",
          "description": "",
          "order": 0,
          "value": false
        },
        "value": {
          "key": "value",
          "type": "number",
          "direction": "output",
          "label": "value",
          "description": "",
          "order": 0,
          "value": 0
        }
      },
      "label": "<Number>"
    },
    "xod/core/concat": {
      "path": "xod/core/concat",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "module.exports.evaluate = function(e) {\n  return { result: (String(e.inputs.a) + String(e.inputs.b)) };\n};\n"
      },
      "pins": {
        "a": {
          "key": "a",
          "type": "string",
          "direction": "input",
          "label": "a",
          "description": "",
          "order": 0,
          "value": ""
        },
        "b": {
          "key": "b",
          "type": "string",
          "direction": "input",
          "label": "b",
          "description": "",
          "order": 0,
          "value": ""
        },
        "result": {
          "key": "result",
          "type": "string",
          "direction": "output",
          "label": "result",
          "description": "",
          "order": 0,
          "value": ""
        }
      },
      "label": "concat"
    },
    "xod/core/clock": {
      "path": "xod/core/clock",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  if (e.context.intervalID) {\n    clearInterval(e.context.intervalID);\n  }\n\n  e.context.intervalID = setInterval(function() {\n    e.fire({ tick: PULSE });\n  }, e.inputs.interval * 1000);\n};\n"
      },
      "pins": {
        "interval": {
          "key": "interval",
          "type": "number",
          "direction": "input",
          "label": "interval",
          "description": "",
          "order": 0,
          "value": 0
        },
        "tick": {
          "key": "tick",
          "type": "pulse",
          "direction": "output",
          "label": "tick",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/const-bool": {
      "path": "xod/core/const-bool",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { value: e.inputs.inValue };\n};\n"
      },
      "pins": {
        "inValue": {
          "key": "inValue",
          "type": "boolean",
          "direction": "input",
          "label": "inValue",
          "description": "",
          "order": 0,
          "value": false
        },
        "pulse": {
          "key": "pulse",
          "type": "pulse",
          "direction": "input",
          "label": "pulse",
          "description": "",
          "order": 0,
          "value": false
        },
        "value": {
          "key": "value",
          "type": "boolean",
          "direction": "output",
          "label": "value",
          "description": "",
          "order": 0,
          "value": false
        }
      },
      "label": "<Bool>"
    },
    "xod/core/compare": {
      "path": "xod/core/compare",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  var a = e.inputs.a;\n  var b = e.inputs.b;\n  if (a < b) {\n    return { less: PULSE };\n  } else if (a > b) {\n    return { greater: PULSE };\n  } else {\n    return { equal: PULSE };\n  }\n};\n"
      },
      "pins": {
        "a": {
          "key": "a",
          "type": "number",
          "direction": "input",
          "label": "a",
          "description": "",
          "order": 0,
          "value": 0
        },
        "b": {
          "key": "b",
          "type": "number",
          "direction": "input",
          "label": "b",
          "description": "",
          "order": 0,
          "value": 0
        },
        "equal": {
          "key": "equal",
          "type": "pulse",
          "direction": "output",
          "label": "equal",
          "description": "",
          "order": 0,
          "value": false
        },
        "less": {
          "key": "less",
          "type": "pulse",
          "direction": "output",
          "label": "less",
          "description": "",
          "order": 0,
          "value": false
        },
        "greater": {
          "key": "greater",
          "type": "pulse",
          "direction": "output",
          "label": "greater",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/choose": {
      "path": "xod/core/choose",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  if (e.inputs.x) {\n    return { truePulse: PULSE };\n  } else {\n    return { falsePulse: PULSE };\n  }\n};\n"
      },
      "pins": {
        "x": {
          "key": "x",
          "type": "boolean",
          "direction": "input",
          "label": "x",
          "description": "",
          "order": 0,
          "value": false
        },
        "truePulse": {
          "key": "truePulse",
          "type": "pulse",
          "direction": "output",
          "label": "truePulse",
          "description": "",
          "order": 0,
          "value": false
        },
        "falsePulse": {
          "key": "falsePulse",
          "type": "pulse",
          "direction": "output",
          "label": "falsePulse",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/cast-string-to-pulse": {
      "path": "xod/core/cast-string-to-pulse",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  if (Boolean(e.inputs.__in__) === false) return;\n\n  return { __out__: PULSE };\n};\n"
      },
      "pins": {
        "__in__": {
          "key": "__in__",
          "type": "string",
          "direction": "input",
          "label": "__in__",
          "description": "",
          "order": 0,
          "value": ""
        },
        "__out__": {
          "key": "__out__",
          "type": "pulse",
          "direction": "output",
          "label": "__out__",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/cast-string-to-boolean": {
      "path": "xod/core/cast-string-to-boolean",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { __out__: Boolean(e.inputs.__in__) };\n};\n"
      },
      "pins": {
        "__in__": {
          "key": "__in__",
          "type": "string",
          "direction": "input",
          "label": "__in__",
          "description": "",
          "order": 0,
          "value": ""
        },
        "__out__": {
          "key": "__out__",
          "type": "boolean",
          "direction": "output",
          "label": "__out__",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/cast-number-to-pulse": {
      "path": "xod/core/cast-number-to-pulse",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  if (Boolean(e.inputs.__in__) === false) return;\n\n  return { __out__: PULSE };\n};\n"
      },
      "pins": {
        "__in__": {
          "key": "__in__",
          "type": "number",
          "direction": "input",
          "label": "__in__",
          "description": "",
          "order": 0,
          "value": 0
        },
        "__out__": {
          "key": "__out__",
          "type": "pulse",
          "direction": "output",
          "label": "__out__",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/cast-number-to-string": {
      "path": "xod/core/cast-number-to-string",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { __out__: String(e.inputs.__in__) };\n};\n"
      },
      "pins": {
        "__in__": {
          "key": "__in__",
          "type": "number",
          "direction": "input",
          "label": "__in__",
          "description": "",
          "order": 0,
          "value": 0
        },
        "__out__": {
          "key": "__out__",
          "type": "boolean",
          "direction": "output",
          "label": "__out__",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/cast-pulse-to-number": {
      "path": "xod/core/cast-pulse-to-number",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { __out__: 1 };\n};\n"
      },
      "pins": {
        "__in__": {
          "key": "__in__",
          "type": "pulse",
          "direction": "input",
          "label": "__in__",
          "description": "",
          "order": 0,
          "value": false
        },
        "__out__": {
          "key": "__out__",
          "type": "number",
          "direction": "output",
          "label": "__out__",
          "description": "",
          "order": 0,
          "value": 0
        }
      }
    },
    "xod/core/cast-pulse-to-boolean": {
      "path": "xod/core/cast-pulse-to-boolean",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { __out__: true };\n};\n"
      },
      "pins": {
        "__in__": {
          "key": "__in__",
          "type": "pulse",
          "direction": "input",
          "label": "__in__",
          "description": "",
          "order": 0,
          "value": false
        },
        "__out__": {
          "key": "__out__",
          "type": "boolean",
          "direction": "output",
          "label": "__out__",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/cast-number-to-boolean": {
      "path": "xod/core/cast-number-to-boolean",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { __out__: Boolean(e.inputs.__in__) };\n};\n"
      },
      "pins": {
        "__in__": {
          "key": "__in__",
          "type": "number",
          "direction": "input",
          "label": "__in__",
          "description": "",
          "order": 0,
          "value": 0
        },
        "__out__": {
          "key": "__out__",
          "type": "boolean",
          "direction": "output",
          "label": "__out__",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/cast-boolean-to-string": {
      "path": "xod/core/cast-boolean-to-string",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { __out__: String(e.inputs.__in__) };\n};\n"
      },
      "pins": {
        "__in__": {
          "key": "__in__",
          "type": "boolean",
          "direction": "input",
          "label": "__in__",
          "description": "",
          "order": 0,
          "value": false
        },
        "__out__": {
          "key": "__out__",
          "type": "string",
          "direction": "output",
          "label": "__out__",
          "description": "",
          "order": 0,
          "value": ""
        }
      }
    },
    "xod/core/cast-boolean-to-number": {
      "path": "xod/core/cast-boolean-to-number",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { __out__: Number(e.inputs.__in__) };\n};\n"
      },
      "pins": {
        "__in__": {
          "key": "__in__",
          "type": "boolean",
          "direction": "input",
          "label": "__in__",
          "description": "",
          "order": 0,
          "value": false
        },
        "__out__": {
          "key": "__out__",
          "type": "number",
          "direction": "output",
          "label": "__out__",
          "description": "",
          "order": 0,
          "value": 0
        }
      }
    },
    "xod/core/button": {
      "path": "xod/core/button",
      "nodes": {},
      "links": {},
      "impls": {
        "espruino": "\nmodule.exports.setup = function(e) {\n  var pin = new Pin(e.props.pin);\n\n  setWatch(function(evt) {\n    e.fire({ state: !evt.state });\n  }, pin, {\n    edge: 'both',\n    repeat: true,\n    debounce: 30\n  });\n};\n"
      },
      "pins": {
        "state": {
          "key": "state",
          "type": "boolean",
          "direction": "output",
          "label": "state",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/cast-boolean-to-pulse": {
      "path": "xod/core/cast-boolean-to-pulse",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  if (e.inputs.__in__ === false) return;\n  return { __out__: PULSE };\n};\n"
      },
      "pins": {
        "__in__": {
          "key": "__in__",
          "type": "boolean",
          "direction": "input",
          "label": "__in__",
          "description": "",
          "order": 0,
          "value": false
        },
        "__out__": {
          "key": "__out__",
          "type": "pulse",
          "direction": "output",
          "label": "__out__",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/buzzer": {
      "path": "xod/core/buzzer",
      "nodes": {},
      "links": {},
      "impls": {
        "espruino": "\nmodule.exports.setup = function(e) {\n  e.context.pin = new Pin(e.props.pin);\n};\n\nmodule.exports.evaluate = function(e) {\n  var f = e.inputs.freq;\n\n  if (f === 0) {\n    digitalWrite(e.context.pin, false);\n  } else {\n    analogWrite(e.context.pin, 0.5, { freq: f });\n  }\n};\n"
      },
      "pins": {
        "freq": {
          "key": "freq",
          "type": "number",
          "direction": "input",
          "label": "freq",
          "description": "",
          "order": 0,
          "value": 0
        }
      },
      "label": "Buzzer"
    },
    "xod/core/both": {
      "path": "xod/core/both",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  if (e.inputs.a && e.inputs.b) {\n    return { out: PULSE };\n  }\n};\n"
      },
      "pins": {
        "a": {
          "key": "a",
          "type": "pulse",
          "direction": "input",
          "label": "a",
          "description": "",
          "order": 0,
          "value": false
        },
        "b": {
          "key": "b",
          "type": "pulse",
          "direction": "input",
          "label": "b",
          "description": "",
          "order": 0,
          "value": false
        },
        "out": {
          "key": "out",
          "type": "pulse",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/analog_output": {
      "path": "xod/core/analog_output",
      "nodes": {},
      "links": {},
      "impls": {
        "espruino": "\nmodule.exports.evaluate = function(e) {\n  analogWrite(e.inputs.pin, e.inputs.value);\n};\n"
      },
      "pins": {
        "pin": {
          "key": "pin",
          "type": "string",
          "direction": "input",
          "label": "pin",
          "description": "",
          "order": 0,
          "value": ""
        },
        "value": {
          "key": "value",
          "type": "number",
          "direction": "input",
          "label": "value",
          "description": "",
          "order": 0,
          "value": 0
        }
      }
    },
    "xod/core/any": {
      "path": "xod/core/any",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  if (e.inputs.a || e.inputs.b) {\n    return { out: PULSE };\n  }\n};\n"
      },
      "pins": {
        "a": {
          "key": "a",
          "type": "pulse",
          "direction": "input",
          "label": "a",
          "description": "",
          "order": 0,
          "value": false
        },
        "b": {
          "key": "b",
          "type": "pulse",
          "direction": "input",
          "label": "b",
          "description": "",
          "order": 0,
          "value": false
        },
        "out": {
          "key": "out",
          "type": "pulse",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": false
        }
      }
    },
    "xod/core/analog_input": {
      "path": "xod/core/analog_input",
      "nodes": {},
      "links": {},
      "impls": {
        "espruino": "\nmodule.exports.evaluate = function(e) {\n  if (!e.inputs.pulse) { return; }\n\n  return { value: analogRead(e.inputs.pin) };\n};\n"
      },
      "pins": {
        "pin": {
          "key": "pin",
          "type": "string",
          "direction": "input",
          "label": "pin",
          "description": "",
          "order": 0,
          "value": ""
        },
        "pulse": {
          "key": "pulse",
          "type": "pulse",
          "direction": "input",
          "label": "pulse",
          "description": "",
          "order": 0,
          "value": false
        },
        "value": {
          "key": "value",
          "type": "number",
          "direction": "output",
          "label": "value",
          "description": "",
          "order": 0,
          "value": 0
        }
      }
    },
    "xod/core/and": {
      "path": "xod/core/and",
      "nodes": {},
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { out: e.inputs.a && e.inputs.b };\n};\n"
      },
      "pins": {
        "a": {
          "key": "a",
          "type": "boolean",
          "direction": "input",
          "label": "a",
          "description": "",
          "order": 0,
          "value": false
        },
        "b": {
          "key": "b",
          "type": "boolean",
          "direction": "input",
          "label": "b",
          "description": "",
          "order": 0,
          "value": false
        },
        "out": {
          "key": "out",
          "type": "boolean",
          "direction": "output",
          "label": "out",
          "description": "",
          "order": 0,
          "value": false
        }
      },
      "label": "and"
    },
    "@/led": {
      "path": "@/led",
      "nodes": {
        "ryFxRcNdKg": {
          "id": "ryFxRcNdKg",
          "type": "xod/core/digital-output",
          "position": {
            "x": 305,
            "y": 430
          },
          "pins": {
            "pin": {
              "curried": false
            }
          }
        },
        "S1ulA9NuFx": {
          "id": "S1ulA9NuFx",
          "type": "xod/core/input-string",
          "position": {
            "x": 172,
            "y": 104
          },
          "pins": {}
        },
        "B1wg0qVOtg": {
          "id": "B1wg0qVOtg",
          "type": "xod/core/input-number",
          "position": {
            "x": 418,
            "y": 104
          },
          "pins": {}
        },
        "rJUgCqNuKl": {
          "id": "rJUgCqNuKl",
          "type": "xod/math/multiply",
          "position": {
            "x": 453,
            "y": 298
          },
          "pins": {}
        },
        "HkSgA94OYx": {
          "id": "HkSgA94OYx",
          "type": "xod/math/multiply",
          "position": {
            "x": 354,
            "y": 218
          },
          "pins": {}
        }
      },
      "links": {
        "Sy0eCq4dtl": {
          "id": "Sy0eCq4dtl",
          "output": {
            "nodeId": "B1wg0qVOtg",
            "pinKey": "__out__"
          },
          "input": {
            "nodeId": "HkSgA94OYx",
            "pinKey": "a"
          }
        },
        "Hykgx054dFx": {
          "id": "Hykgx054dFx",
          "output": {
            "nodeId": "B1wg0qVOtg",
            "pinKey": "__out__"
          },
          "input": {
            "nodeId": "rJUgCqNuKl",
            "pinKey": "b"
          }
        },
        "SklgeRc4uKl": {
          "id": "SklgeRc4uKl",
          "output": {
            "nodeId": "HkSgA94OYx",
            "pinKey": "out"
          },
          "input": {
            "nodeId": "rJUgCqNuKl",
            "pinKey": "a"
          }
        },
        "By-xeR5V_tx": {
          "id": "By-xeR5V_tx",
          "output": {
            "nodeId": "rJUgCqNuKl",
            "pinKey": "out"
          },
          "input": {
            "nodeId": "ryFxRcNdKg",
            "pinKey": "value"
          }
        },
        "BkMgl09VuYe": {
          "id": "BkMgl09VuYe",
          "output": {
            "nodeId": "S1ulA9NuFx",
            "pinKey": "__out__"
          },
          "input": {
            "nodeId": "ryFxRcNdKg",
            "pinKey": "pin"
          }
        },
        "rymee0cE_Yx": {
          "id": "rymee0cE_Yx",
          "output": {
            "nodeId": "B1wg0qVOtg",
            "pinKey": "__out__"
          },
          "input": {
            "nodeId": "HkSgA94OYx",
            "pinKey": "b"
          }
        }
      },
      "impls": {},
      "pins": {
        "S1ulA9NuFx": {
          "key": "S1ulA9NuFx",
          "type": "string",
          "direction": "input",
          "label": "S1ulA9NuFx",
          "description": "",
          "order": 0,
          "value": ""
        },
        "B1wg0qVOtg": {
          "key": "B1wg0qVOtg",
          "type": "number",
          "direction": "input",
          "label": "B1wg0qVOtg",
          "description": "",
          "order": 0,
          "value": 0
        }
      },
      "label": "Led"
    },
    "@/main": {
      "path": "@/main",
      "nodes": {
        "BJ4l0cVdKe": {
          "id": "BJ4l0cVdKe",
          "type": "@/led",
          "position": {
            "x": 237,
            "y": 349
          },
          "pins": {
            "S1ulA9NuFx": {
              "curried": true,
              "value": "LED1"
            }
          }
        },
        "SJ7g05EdFe": {
          "id": "SJ7g05EdFe",
          "type": "@/blink",
          "position": {
            "x": 238,
            "y": 184
          },
          "pins": {
            "B1eR5EOYg": {
              "curried": true,
              "value": 1
            }
          }
        }
      },
      "links": {
        "rk6l094Otl": {
          "id": "rk6l094Otl",
          "output": {
            "nodeId": "SJ7g05EdFe",
            "pinKey": "BJGgAcVOtx"
          },
          "input": {
            "nodeId": "BJ4l0cVdKe",
            "pinKey": "B1wg0qVOtg"
          }
        }
      },
      "impls": {},
      "pins": {},
      "label": "Main"
    },
    "@/blink": {
      "path": "@/blink",
      "nodes": {
        "BJGgAcVOtx": {
          "id": "BJGgAcVOtx",
          "type": "xod/core/output-bool",
          "position": {
            "x": 263,
            "y": 508
          },
          "pins": {}
        },
        "rJWgAqVOtx": {
          "id": "rJWgAqVOtx",
          "type": "xod/core/latch",
          "position": {
            "x": 271,
            "y": 355
          },
          "pins": {}
        },
        "rJxgAqV_tl": {
          "id": "rJxgAqV_tl",
          "type": "xod/core/clock",
          "position": {
            "x": 267,
            "y": 215
          },
          "pins": {
            "interval": {
              "curried": false,
              "value": 1
            }
          }
        },
        "B1eR5EOYg": {
          "id": "B1eR5EOYg",
          "type": "xod/core/input-number",
          "position": {
            "x": 268,
            "y": 103
          },
          "pins": {}
        }
      },
      "links": {
        "H15x05VuYg": {
          "id": "H15x05VuYg",
          "output": {
            "nodeId": "rJWgAqVOtx",
            "pinKey": "state"
          },
          "input": {
            "nodeId": "BJGgAcVOtx",
            "pinKey": "__in__"
          }
        },
        "SkoxR5NOFl": {
          "id": "SkoxR5NOFl",
          "output": {
            "nodeId": "B1eR5EOYg",
            "pinKey": "__out__"
          },
          "input": {
            "nodeId": "rJxgAqV_tl",
            "pinKey": "interval"
          }
        },
        "H13l0qVOtg": {
          "id": "H13l0qVOtg",
          "output": {
            "nodeId": "rJxgAqV_tl",
            "pinKey": "tick"
          },
          "input": {
            "nodeId": "rJWgAqVOtx",
            "pinKey": "toggle"
          }
        }
      },
      "impls": {},
      "pins": {
        "BJGgAcVOtx": {
          "key": "BJGgAcVOtx",
          "type": "boolean",
          "direction": "output",
          "label": "BJGgAcVOtx",
          "description": "",
          "order": 0,
          "value": false
        },
        "B1eR5EOYg": {
          "key": "B1eR5EOYg",
          "type": "number",
          "direction": "input",
          "label": "B1eR5EOYg",
          "description": "",
          "order": 0,
          "value": 0
        }
      },
      "label": "Blink"
    }
  }
}
